//! This example shows how to create a custom render pass that runs after the main pass
//! and reads the texture generated by the main pass.
//!
//! The example shader is a very simple implementation of chromatic aberration.
//!
//! This is a fairly low level example and assumes some familiarity with rendering concepts and wgpu.

mod camera_controller;
mod volumetric_clouds;
use bevy::{math::vec3, prelude::*};

use camera_controller::{PanOrbitCamera, PanOrbitCameraPlugin};
use volumetric_clouds::{
    CloudVolume, VolumetricCloudLight, VolumetricCloudPlugin, VolumetricCloudSettings,
};

fn main() {
    App::new()
        .add_plugins((
            DefaultPlugins,
            PanOrbitCameraPlugin,
            VolumetricCloudPlugin,
            // WorldInspectorPlugin::new(), TODO: wait for update to bevy-egui-inspector
        ))
        .add_systems(Startup, setup)
        .run();
}

fn setup(mut commands: Commands, asset_server: Res<AssetServer>) {
    info!("Hello, clouds!");
    commands.spawn((
        Camera3dBundle {
            transform: Transform::from_xyz(-0.75, 1.0, 2.0)
                .looking_at(vec3(0.0, 0.0, 0.0), Vec3::Y),
            camera: Camera {
                hdr: true,
                ..default()
            },
            ..default()
        },
        PanOrbitCamera::default(),
        VolumetricCloudSettings::default(),
    ));

    commands
        .spawn(DirectionalLightBundle {
            transform: Transform::from_xyz(1.0, 1.0, -0.3).looking_at(vec3(0.0, 0.5, 0.0), Vec3::Y),
            directional_light: DirectionalLight {
                shadows_enabled: true,
                illuminance: 32000.0,
                ..default()
            },
            ..default()
        })
        // Make sure to add this for the light to interact with the fog.
        .insert(VolumetricCloudLight);

    commands
        .spawn(SpatialBundle {
            visibility: Visibility::Visible,
            transform: Transform::from_xyz(0.0, 0.5, 0.0),
            ..default()
        })
        .insert(CloudVolume {
            density_texture: Some(asset_server.load("volumes/bunny.ktx2")),
            density_factor: 1.0,
            // Scatter as much of the light as possible, to brighten the bunny
            // up.
            scattering: 1.0,
            ..default()
        });

    let cube_mesh_handle = asset_server.add(Cuboid::default().mesh().into());

    let material = asset_server.add(StandardMaterial {
        base_color: Color::LinearRgba(LinearRgba::new(0.0, 0.0, 0.0, 1.0)),
        ..default()
    });

    commands.spawn(PbrBundle {
        mesh: cube_mesh_handle,
        material,
        transform: Transform::from_xyz(0.0, 0.5, 0.0),
        ..default()
    });
}
